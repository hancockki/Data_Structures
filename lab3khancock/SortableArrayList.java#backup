import java.util.Comparator;

public class SortableArrayList<T> extends SimpleArrayList<T> {
    
    // create new class for compare method (write implements Comparator)
            // for example, test a comparison of integers (IntComparator)
    public static class TestComparator implements Comparator<Integer> {
        @Override
        public int compare(Integer a, Integer b) {
            return a - b;  // returns -, 0, or + if a is <, =, or > b
        }
        
    }
    
    // create two constructors, one for each in the parent class
        // initialize instance variables defined in this class AND parent class (SimpleArrayList)
        // ie. call both constructors defined in parent (super keyword)
        // then init. any other instance variables found in this class (none in this case)
    public SortableArrayList(int startingCapacity) {
        super(startingCapacity);    // constructor with capacity given as a parameter
    }
    
    public SortableArrayList() {
        super();        // constructor with default capacity
    }
    
    
    
    // create a sort method
        // reorders the list in ascending order
        // use the following declaration:
        // public void sort(Comparator<? super T> c)
        // void because changes the existing list, does not return sorted copy 
        //  comparator as parameter
        
        // pseudocode for SelectionSort:
        // for each unsorted list index, starting from the end:
            // find largest value in the unsorted part of the list\
            // swap this value with the rightmost unsorted list element

    private static void swap(int[] data, int i, int j) {
        int temp = data[i];
        data[i] = data[j];
        data[j] = temp;
    }
    
    public static void selectionSort(int[] data) {
        for (int unsorted = data.length; unsorted > 0; unsorted--) {
            int largest = 0;
            for (int i = 1; i<unsorted; i++) {
                if (data[largest] < data[i]) {
                    largest = i;
                }
            }
            
            swap(data, largest, unsorted-1);
            }
        }
    
        
    // create main method to test sort method behavior
        // make short list of ints and sort it using the IntComparator given
        //      create a comparator
        //      hand that comparator to sort method --> myIntegerList.sort(new TestComparator());
        // print it before and after the sort
    
        
    // no need for new toString method
}  