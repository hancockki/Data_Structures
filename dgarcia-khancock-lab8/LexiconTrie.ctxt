#BlueJ class context
comment0.target=LexiconTrie
comment0.text=\r\n\ Implementation\ of\ the\ Lexicon\ interface.\ Implements\ methods\ for\ constructing\ a\ lexicon,\ or\ word\ \r\n\ list,\ including\ adding,\ removing,\ and\ iterating\ over\ words.\ Uses\ a\ trie\ structure\ of\ recursively\ \r\n\ defined\ LexiconNode\ objects\ representing\ letters.\r\n\r\n\ @authors\ Devon\ Garcia,\ Kim\ Hancock\r\n\ @version\ November\ 19,\ 2018\r\n
comment1.params=
comment1.target=LexiconTrie()
comment1.text=\r\n\ Constructor\ for\ LexiconTrie\ objects.\r\n
comment10.params=wordsToPrint\ nextWord\ currentNode
comment10.target=void\ addToList(java.util.List,\ java.lang.String,\ LexiconNode)
comment10.text=\r\n\ Helper\ method\ for\ iterator().\ Recursively\ adds\ words\ to\ a\ list\ to\ iterate\ over\ by\ adding\r\n\ characters\ from\ a\ particular\ branch\ until\ a\ LexiconNode\ that\ is\ a\ word\ end\ is\ reached.\r\n\ \r\n\ @param\ wordsToPrint\ \r\n\ \ \ \ \ \ \ \ \ \ The\ list\ of\ words\ to\ iterate\ over.\r\n\ @param\ nextWord\r\n\ \ \ \ \ \ \ \ \ \ The\ next\ word\ to\ add\ to\ the\ list\ in\ the\ trie.\r\n\ @param\ currentNode\r\n\ \ \ \ \ \ \ \ \ \ The\ next\ node\ to\ iterate\ over.\r\n
comment11.params=target\ maxDistance
comment11.target=java.util.Set\ suggestCorrections(java.lang.String,\ int)
comment11.text=\r\n\ Returns\ a\ set\ of\ words\ in\ the\ lexicon\ that\ are\ suggested\ corrections\ for\ a\r\n\ given\ (possibly\ misspelled)\ word.\ Suggestions\ will\ include\ all\ words\ in\ the\r\n\ lexicon\ that\ are\ at\ most\ maxDistance\ distance\ from\ the\ target\ word,\ where\r\n\ the\ distance\ between\ two\ words\ is\ defined\ as\ the\ number\ of\ character\r\n\ positions\ in\ which\ the\ words\ differ.\ Should\ run\ in\ time\ proportional\ to\ the\r\n\ length\ of\ the\ target\ word.\r\n\ \r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ \ \ The\ target\ word\ to\ be\ corrected.\r\n\ @param\ maxDistance\r\n\ \ \ \ \ \ \ \ \ \ The\ maximum\ word\ distance\ of\ suggested\ corrections.\r\n\ @return\ A\ set\ of\ all\ suggested\ corrections\ within\ maxDistance\ of\ the\ target\r\n\ \ \ \ \ \ \ \ \ word.\r\n
comment12.params=corrections\ nextWord\ target\ currentNode\ curDistance\ maxDistance
comment12.target=void\ addCorrections(java.util.Set,\ java.lang.String,\ java.lang.String,\ LexiconNode,\ int,\ int)
comment12.text=\r\n\ Helper\ method\ for\ suggestCorrections.\ Recursively\ checks\ whether\ the\ letter\r\n\ at\ the\ current\ node\ matches\ the\ letter\ in\ the\ string\ suggested.\r\n\ \r\n\ @param\ corrections\r\n\ \ \ \ \ \ \ \ \ \ The\ set\ of\ words\ whose\ distance\ from\ the\ given\ string\ is\ less\r\n\ \ \ \ \ \ \ \ \ \ than\ the\ distance\ given.\r\n\ @param\ nextWord\r\n\ \ \ \ \ \ \ \ \ \ The\ next\ word\ to\ be\ added\ to\ the\ set\ if\ it\ fits\ the\ given\ criteria.\r\n\ @param\ target\r\n\ \ \ \ \ \ \ \ \ \ The\ word\ to\ find\ suggestions\ for.\r\n\ @param\ currentNode\r\n\ \ \ \ \ \ \ \ \ \ The\ next\ node\ to\ iterate\ over.\r\n\ @param\ curDistance\r\n\ \ \ \ \ \ \ \ \ \ The\ current\ word\ distance\ of\ suggested\ corrections.\r\n\ @param\ maxDistance\r\n\ \ \ \ \ \ \ \ \ \ The\ maximum\ word\ distance\ of\ suggested\ corrections.\r\n
comment13.params=pattern
comment13.target=java.util.Set\ matchRegex(java.lang.String)
comment13.text=\r\n\ Returns\ a\ set\ of\ all\ words\ in\ the\ lexicon\ that\ match\ the\ given\ regular\r\n\ expression\ pattern.\ The\ regular\ expression\ pattern\ may\ contain\ only\ letters\r\n\ and\ wildcard\ characters\ '*',\ '?',\ and\ '_'.\r\n\ \r\n\ @param\ pattern\r\n\ \ \ \ \ \ \ \ \ \ The\ regular\ expression\ pattern\ to\ match.\r\n\ @return\ A\ set\ of\ all\ words\ in\ the\ lexicon\ matching\ the\ pattern.\r\n
comment14.params=regexWords\ currentNode\ pattern\ match
comment14.target=void\ addRegexMatches(java.util.Set,\ LexiconNode,\ java.lang.String,\ java.lang.String)
comment14.text=\r\n\ Helper\ method\ for\ matchRegex.\ Recursively\ adds\ words\ that\ match\r\n\ the\ given\ regular\ expressions\ pattern\ to\ a\ set.\r\n\ \r\n\ @param\ regexWords\r\n\ \ \ \ \ \ \ \ \ \ The\ set\ of\ words\ in\ the\ lexicon\ matching\ the\ pattern.\r\n\ @param\ currentNode\r\n\ \ \ \ \ \ \ \ \ \ The\ current\ node\ to\ iterate\ over.\r\n\ @param\ pattern\r\n\ \ \ \ \ \ \ \ \ \ The\ regular\ expression\ pattern\ to\ match.\r\n\ @param\ match\r\n\ \ \ \ \ \ \ \ \ \ The\ word\ in\ the\ lexicon\ that\ matches\ the\ pattern\ and\ is\ added\ to\ the\ set.\r\n
comment2.params=word
comment2.target=boolean\ addWord(java.lang.String)
comment2.text=\r\n\ Adds\ the\ specified\ word\ to\ the\ lexicon.\ Should\ run\ in\ time\ proportional\ to\r\n\ the\ length\ of\ the\ word\ being\ added.\ Returns\ whether\ the\ lexicon\ was\r\n\ modified\ by\ adding\ the\ word.\r\n\ \r\n\ @param\ word\r\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ add\ to\ the\ lexicon.\r\n\ @return\ True\ if\ the\ word\ was\ added\ and\ false\ if\ the\ word\ was\ already\ part\r\n\ \ \ \ \ \ \ \ \ of\ the\ lexicon.\r\n
comment3.params=filename
comment3.target=int\ addWordsFromFile(java.lang.String)
comment3.text=\r\n\ Reads\ the\ words\ contained\ in\ the\ specified\ file\ and\ adds\ them\ to\ the\r\n\ lexicon.\ The\ format\ of\ the\ given\ file\ is\ expected\ to\ be\ one\ word\ per\ line\r\n\ of\ the\ file.\ All\ words\ should\ be\ converted\ to\ lowercase\ before\ adding.\r\n\ Returns\ the\ number\ of\ new\ words\ added,\ or\ -1\ if\ the\ file\ could\ not\ be\ read.\r\n\ \r\n\ @param\ filename\r\n\ \ \ \ \ \ \ \ \ \ The\ name\ of\ the\ file\ to\ read.\r\n\ @return\ The\ number\ of\ new\ words\ added,\ or\ -1\ if\ the\ file\ could\ not\ be\ read.\r\n
comment4.params=word
comment4.target=boolean\ removeWord(java.lang.String)
comment4.text=\r\n\ Attempts\ to\ remove\ the\ specified\ word\ from\ the\ lexicon.\ If\ the\ word\ appears\r\n\ in\ the\ lexicon,\ it\ is\ removed\ and\ true\ is\ returned.\ If\ the\ word\ does\ not\r\n\ appear\ in\ the\ lexicon,\ the\ lexicon\ is\ unchanged\ and\ false\ is\ returned.\r\n\ Should\ run\ in\ time\ proportional\ to\ the\ length\ of\ the\ word\ being\ removed.\ It\r\n\ is\ implementation-dependent\ whether\ unneeded\ prefixes\ as\ a\ result\ of\r\n\ removing\ the\ word\ are\ also\ removed\ from\ the\ lexicon.\r\n\ \r\n\ @param\ word\r\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ remove\ from\ the\ lexicon.\r\n\ @return\ Whether\ the\ word\ was\ removed.\r\n
comment5.params=
comment5.target=int\ numWords()
comment5.text=\r\n\ Returns\ the\ number\ of\ words\ contained\ in\ the\ lexicon.\ Should\ run\ in\r\n\ constant\ time.\r\n\ \r\n\ @return\ The\ number\ of\ words\ in\ the\ lexicon.\r\n
comment6.params=word
comment6.target=boolean\ containsWord(java.lang.String)
comment6.text=\r\n\ Checks\ whether\ the\ given\ word\ exists\ in\ the\ lexicon.\ Should\ run\ in\ time\r\n\ proportional\ to\ the\ length\ of\ the\ word\ being\ looked\ up.\r\n\ \r\n\ @param\ word\r\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ word\ to\ lookup\ in\ the\ lexicon.\r\n\ @return\ Whether\ the\ given\ word\ exists\ in\ the\ lexicon.\r\n
comment7.params=word
comment7.target=LexiconNode\ checkForWord(java.lang.String)
comment7.text=\r\n\ Helper\ method\ that\ iterates\ through\ the\ trie\ over\ the\ path\ of\ the\ \r\n\ input\ string.\ Checks\ to\ see\ that\ each\ letter\ is\ a\ LexiconNode\ in\ the\ trie.\r\n\ \r\n\ @param\ word\r\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ string\ to\ lookup\ in\ the\ lexicon.\r\n\ @return\ The\ LexiconNode\ object\ representing\ the\ last\ letter\ in\ the\r\n\ \ \ \ \ \ \ input\ string,\ or\ null\ if\ the\ string\ is\ not\ in\ the\ trie.\r\n
comment8.params=prefix
comment8.target=boolean\ containsPrefix(java.lang.String)
comment8.text=\r\n\ Checks\ whether\ any\ words\ in\ the\ lexicon\ begin\ with\ the\ specified\ prefix.\ A\r\n\ word\ is\ defined\ to\ be\ a\ prefix\ of\ itself,\ and\ the\ empty\ string\ is\ defined\r\n\ to\ be\ a\ prefix\ of\ everything.\ Should\ run\ in\ time\ proportional\ to\ the\ length\r\n\ of\ the\ prefix.\r\n\ \r\n\ @param\ prefix\r\n\ \ \ \ \ \ \ \ \ \ The\ lowercase\ prefix\ to\ lookup\ in\ the\ lexicon.\r\n\ @return\ Whether\ the\ given\ prefix\ exists\ in\ the\ lexicon.\r\n
comment9.params=
comment9.target=java.util.Iterator\ iterator()
comment9.text=\r\n\ Returns\ an\ iterator\ over\ all\ words\ contained\ in\ the\ lexicon.\ The\ iterator\r\n\ should\ return\ words\ in\ the\ lexicon\ in\ alphabetical\ order.\r\n
numComments=15
